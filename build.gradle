//------------------------------------------------------------------------------
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "aliyun"
            url "https://maven.aliyun.com/repository/public/"
        }
        maven {
            url 'https://jitpack.io'
        }
    }
    dependencies {
        //implementation("com.google.code.gson:gson:2.8.8")
        classpath group: 'com.google.code.gson', name: 'gson', version: '2.8.8'
    }
}


plugins {
    id 'java-library'
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    //id 'org.openjfx.javafxplugin' version '0.0.10'
}


sourceCompatibility = 1.8
targetCompatibility = 1.8


//version "Alpha-0.1.0-SNAPSHOT"
version = "0.1.0-Alpha"
group = "io.github.mangostudio.mango"
archivesBaseName = "MangoModMaker"

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


// 这将此任务创建一个.jar文件，其中包含此 MOD 的源代码
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// 这将此任务将创建一个.jar文件，其中包含此mod的已取消订阅版本，供其他开发人员在开发环境中使用。
task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

// 在构建 JAR 时候，创建列出的工件
artifacts {
    archives sourcesJar
    archives devJar
}

//------------------------------------------------------------------------------
repositories {
    mavenCentral()
    // 借用 阿里云 存储库、国内存储库
    maven {
        name = "aliyun"
        url "https://maven.aliyun.com/repository/public/"
    }

    maven {
        url 'https://jitpack.io'
    }

    /*
    maven {
        url "https://repo.gradle.org/gradle/libs-releases-local/"
    }
    */

    // flatDir { dirs 'lib' }
}

/*
configurations {
    win64
}
javafx {
    version = "8"
    modules = ['javafx.web', 'javafx.swing']
    configuration = 'provided' // we provide natives during deployment or with SDK
}
*/




dependencies {
    // 本地lib 文件夹
    //implementation fileTree(dir: 'lib', include: ['*.jar'])

    // log4j 日志
    implementation("org.apache.logging.log4j:log4j-core:2.14.1")
    // json - gson-Google-JSON
    implementation("com.google.code.gson:gson:2.8.8")
    // FlatLaf - 扁平化的外观和感觉
    implementation("com.formdev:flatlaf:1.5")
    implementation("com.formdev:flatlaf-intellij-themes:1.5")

    implementation("org.slick2d:slick2d-core:1.0.2")
    // implementation 'com.jtattoo:JTattoo:1.6.11'


    // JFX natives
    // win64 group: 'org.openjfx', name: 'javafx-base', version: '8', classifier: 'win'
    // win64 group: 'org.openjfx', name: 'javafx-controls', version: '8', classifier: 'win'
    // win64 group: 'org.openjfx', name: 'javafx-graphics', version: '8', classifier: 'win'
    // win64 group: 'org.openjfx', name: 'javafx-media', version: '8', classifier: 'win'
    // win64 group: 'org.openjfx', name: 'javafx-web', version: '8', classifier: 'win'
    // win64 group: 'org.openjfx', name: 'javafx-swing', version: '8', classifier: 'win'
}


shadowJar {
    dependencies {
        include(dependency("org.apache.logging.log4j:log4j-core:2.14.1"))
        include(dependency("com.google.code.gson:gson:2.8.8"))
        include(dependency("com.formdev:flatlaf:1.5"))
        include(dependency("com.formdev:flatlaf-intellij-themes:1.5"))
    }
    manifest {
        attributes(
                'Main-Class': 'io.github.mangostudio.mango.Start'
        )
    }
}


defaultTasks 'clean', 'build'


var jfxModules = ['base', 'graphics', 'controls', 'fxml', 'media', 'web']
var jfxArches = ['linux', 'linux-arm32-monocle', 'linux-aarch64', 'mac', 'mac-aarch64', 'win', 'win-x86']
var jfxVersion = "17"
var jfxRepos = ['https://repo1.maven.org/maven2', 'https://maven.aliyun.com/repository/central']
var jfxDependenciesFile = file('HMCL/src/main/resources/assets/openjfx-dependencies.json')
var jfxUnsupported = [
        'linux-arm32-monocle': ['media', 'web']
]

import com.google.gson.*

task 'generateOpenJFXDependencies' {
    doLast {
        var jfxDependencies = new JsonArray()

        jfxModules.forEach { module ->
            JsonObject m = new JsonObject()
            m.addProperty("module", "javafx.$module")
            m.addProperty("groupId", "org.openjfx")
            m.addProperty("artifactId", "javafx-$module")
            m.addProperty("version", jfxVersion)

            var sha1 = new JsonObject()
            jfxArches.forEach { arch ->
                if (jfxUnsupported.getOrDefault(arch, []).contains(module)) {
                    return
                }

                sha1.addProperty(
                        arch,
                        new URL("${jfxRepos.head()}/org/openjfx/javafx-$module/$jfxVersion/javafx-$module-$jfxVersion-${arch}.jar.sha1").getText("UTF-8")
                )
            }
            m.add("sha1", sha1)

            jfxDependencies.add(m)
        }

        jfxDependenciesFile.text = new GsonBuilder().setPrettyPrinting().create().toJson(jfxDependencies)
    }
}


// Ensure that the mirror repository caches files
task 'preTouchOpenJFXDependencies' {
    doLast {
        jfxRepos.tail().forEach { repo ->
            jfxModules.forEach { module ->
                jfxArches.forEach { arch ->
                    if (jfxUnsupported.getOrDefault(arch, []).contains(module)) {
                        return
                    }
                    var jarUrl = "$repo/org/openjfx/javafx-$module/$jfxVersion/javafx-$module-$jfxVersion-${arch}.jar"

                    [jarUrl, jarUrl + ".sha1"].forEach { url ->
                        try {
                            new URL(url).getBytes()
                            System.out.println(url)
                        } catch (Throwable ignored) {
                            ignored.printStackTrace()
                        }
                    }
                }
            }
        }
    }
}

task 'checkTranslations' {
    group 'verification'
    doLast {
        var en = new Properties()
        var zh = new Properties()
        var zh_CN = new Properties()

        file("mango-mod-maker/src/main/resources/assets/mangomodmaker/lang/en_us.lang").withInputStream { en.load(it) }
        file("mango-mod-maker/src/main/resources/assets/mangomodmaker/lang/zh_cn.lang").withInputStream { zh.load(it) }
        file("mango-mod-maker/src/main/resources/assets/mangomodmaker/lang/zh.lang").withInputStream { zh_CN.load(it) }

        boolean success = true

        zh_CN.forEach { k, v ->
            if (!en.containsKey(k)) {
                project.logger.log(LogLevel.WARN, "I18N.lang missing key '$k'")
                success = false
            }
        }

        zh_CN.forEach { k, v ->
            if (!zh.containsKey(k)) {
                project.logger.log(LogLevel.WARN, "zh.lang missing key '$k'")
                success = false
            }
        }

        if (!success) {
            throw new GradleException("Part of the translation is missing")
        }
    }
}